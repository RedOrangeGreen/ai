"""
Using Ollama From Python To Create A Simple, Locally Running, Graphical Chat Interface
======================================================================================

Platform
--------
Ubuntu Linux 24.04.1 LTS

Setting Up
-----------
Download Ollama Maintenance Tool from https://redorangegreen.github.io/ai/ollama/maintenancetool.html
chmod +x ./ollama.sh
./ollama.sh
  1. Install Ollama
  2. Chat With Ollama (Using Default Model: llama3.2:1b)
  /bye
  5. Exit
sudo apt install python3-venv
python3 -m venv myenv
source myenv/bin/activate
pip cache purge
pip install PyQt6 ollama

Using
-----
source myenv/bin/activate
python3 useollama.py

Cleaning Up
-----------
deactivate
rm -rf ./myenv

Development And Testing
-----------------------
All source code was AI generated by Copilot answers to Pilot questions.
Pilot: AI Playground (Quasimodo), https://redorangegreen.github.io/ai
Copilot: Perplexity AI Free, https://www.perplexity.ai

Test Questions
--------------
Why is the sky blue?
Why is the sea blue?
Show me a C++ hello world which calls a class containing sum() and mult() methods, just the code, no explanation
"""
import sys
import ollama
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QPushButton, QTextEdit, QLineEdit, QComboBox, QDialog, QLabel,
                             QMenuBar, QMenu)
from PyQt6.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt6.QtGui import QFont

class AIWorker(QThread):
    word_received = pyqtSignal(str)
    finished = pyqtSignal()
    error = pyqtSignal(str)

    def __init__(self, model, question):
        super().__init__()
        self.model = model
        self.question = question

    def run(self):
        try:
            stream = ollama.chat(
                model=self.model,
                messages=[{'role': 'user', 'content': self.question}],
                stream=True
            )
            for chunk in stream:
                if 'content' in chunk.get('message', {}):
                    content = chunk['message']['content']
                    self.word_received.emit(content)
            self.finished.emit()
        except Exception as e:
            self.error.emit(str(e))

class SimpleLoadingDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowFlags(Qt.WindowType.Dialog | Qt.WindowType.FramelessWindowHint)
        self.setStyleSheet("""
            QDialog {
                background-color: white;
                border: 2px solid #888888;
            }
            QLabel {
                font-size: 16px;
                padding: 10px;
            }
        """)
        
        layout = QVBoxLayout(self)
        self.message_label = QLabel("Generating response...")
        
        font = QFont("Courier")
        font.setPointSize(16)
        self.message_label.setFont(font)
        
        self.message_label.setFixedSize(250, 40)
        
        layout.addWidget(self.message_label)
        
        self.setLayout(layout)
        
        self.setFixedSize(300, 80)
        
        self.dots = 0
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_dots)
        self.timer.start(500)

    def update_dots(self):
        self.dots = (self.dots + 1) % 4
        dots_text = '.' * self.dots
        self.message_label.setText(f"Generating response{dots_text:<3}")

    def showEvent(self, event):
        if self.parent():
            self.move(self.parent().geometry().center() - self.rect().center())
        super().showEvent(event)

    def mousePressEvent(self, event):
        self.oldPos = event.globalPosition().toPoint()

    def mouseMoveEvent(self, event):
        delta = event.globalPosition().toPoint() - self.oldPos
        self.move(self.x() + delta.x(), self.y() + delta.y())
        self.oldPos = event.globalPosition().toPoint()

class ChatWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ollama Chat Interface")
        self.setGeometry(100, 100, 800, 600)

        self.create_menu_bar()

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        self.chat_display = QTextEdit()
        self.chat_display.setReadOnly(True)
        layout.addWidget(self.chat_display)

        input_layout = QHBoxLayout()
        
        self.question_input = QLineEdit()
        self.question_input.setPlaceholderText("Enter your question here...")
        self.question_input.returnPressed.connect(self.send_question)
        input_layout.addWidget(self.question_input, 1)

        self.model_selector = QComboBox()
        self.model_selector.addItems(["llama3.2:1b"])
        input_layout.addWidget(self.model_selector)

        self.print_mode = QComboBox()
        self.print_mode.addItems(["Word-by-Word", "Full"])
        input_layout.addWidget(self.print_mode)

        self.send_button = QPushButton("Send")
        self.send_button.clicked.connect(self.send_question)
        input_layout.addWidget(self.send_button)

        layout.addLayout(input_layout)

        self.loading_dialog = None
        self.current_response = ""

    def create_menu_bar(self):
        menu_bar = QMenuBar(self)
        self.setMenuBar(menu_bar)

        file_menu = QMenu("&File", self)
        menu_bar.addMenu(file_menu)

        exit_action = file_menu.addAction("&Exit")
        exit_action.triggered.connect(self.close)

        help_menu = QMenu("&Help", self)
        menu_bar.addMenu(help_menu)

        about_action = help_menu.addAction("&About")
        about_action.triggered.connect(self.show_about_dialog)

    def show_about_dialog(self):
        about_dialog = QDialog(self)
        about_dialog.setFixedSize(300, 200)
        about_dialog.setStyleSheet("border: 2px solid black;")
        layout = QVBoxLayout(about_dialog)
        about_label = QLabel("Ollama Chat Interface\nVersion 1.0\n\nCreated by Your Name")
        about_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(about_label)
        about_dialog.exec()

    def send_question(self):
        question = self.question_input.text()
        if question:
            self.append_to_chat("You", question)
            self.question_input.clear()
            self.get_and_print_response(question)

    def get_and_print_response(self, question):
        model = self.model_selector.currentText()
        
        self.loading_dialog = SimpleLoadingDialog(self)
        self.loading_dialog.show()

        self.worker = AIWorker(model, question)
        self.worker.word_received.connect(self.handle_word)
        self.worker.finished.connect(self.handle_response_finished)
        self.worker.error.connect(self.handle_error)
        self.worker.start()

        self.chat_display.insertPlainText("AI: ")
        self.current_response = ""

    def handle_word(self, word):
        self.current_response += word
        if self.print_mode.currentText() == "Word-by-Word":
            if self.loading_dialog:
                self.loading_dialog.close()
                self.loading_dialog = None
            self.chat_display.insertPlainText(word)
            self.scroll_to_bottom()
        
    def handle_response_finished(self):
        if self.print_mode.currentText() == "Full":
            self.chat_display.insertPlainText(self.current_response)
        self.chat_display.insertPlainText("\n\n")
        self.scroll_to_bottom()
        self.current_response = ""
        
        if self.loading_dialog:
            self.loading_dialog.close()
            self.loading_dialog = None

    def handle_error(self, error_message):
        if self.loading_dialog:
            self.loading_dialog.close()
            self.loading_dialog = None
        error_dialog = QDialog(self)
        error_dialog.setWindowTitle("Error")
        error_layout = QVBoxLayout(error_dialog)
        error_label = QLabel(f"An error occurred: {error_message}")
        error_layout.addWidget(error_label)
        error_dialog.exec()

    def append_to_chat(self, sender, message):
        self.chat_display.append(f"{sender}: {message}\n")
        self.scroll_to_bottom()

    def scroll_to_bottom(self):
        scrollbar = self.chat_display.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

def main():
    app = QApplication(sys.argv)
    window = ChatWindow()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
